import logging
import sqlite3
import asyncio
import re
import os
from typing import Dict, List, Optional
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_TOKEN =os.getenv("TOKEN")
ADMIN_USER_IDS = ['']

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Ç–µ–∫—É—â–∏—Ö —Å–µ—Å—Å–∏–π –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–π
user_sessions = {}


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class StickerStates(StatesGroup):
    waiting_for_associations = State()
    waiting_for_sticker = State()
    editing_associations = State()


# –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
class StickerDatabase:
    def __init__(self, db_path: str = os.getenv("DATABASE_PATH")):
        self.db_path = db_path
        self.init_db()

    def init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()

        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Å—Ç–∏–∫–µ—Ä–æ–≤ –∏ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS sticker_associations (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                sticker_id TEXT NOT NULL,
                association TEXT NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                UNIQUE(sticker_id, association)
            )
        ''')

        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS usage_stats (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                sticker_id TEXT NOT NULL,
                association TEXT NOT NULL,
                used_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')

        # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
        cursor.execute('CREATE INDEX IF NOT EXISTS idx_association ON sticker_associations(association)')
        cursor.execute('CREATE INDEX IF NOT EXISTS idx_sticker ON sticker_associations(sticker_id)')
        cursor.execute('CREATE INDEX IF NOT EXISTS idx_user ON sticker_associations(user_id)')

        conn.commit()
        conn.close()

    def add_association(self, user_id: int, sticker_id: str, association: str) -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute(
                'INSERT OR IGNORE INTO sticker_associations (user_id, sticker_id, association) VALUES (?, ?, ?)',
                (user_id, sticker_id, association.lower().strip())
            )
            conn.commit()
            success = cursor.rowcount > 0
            conn.close()
            return success
        except Exception as e:
            logger.error(f"Error adding association: {e}")
            return False

    def get_sticker_by_association(self, association: str) -> Optional[str]:
        """–ü–æ–∏—Å–∫ —Å—Ç–∏–∫–µ—Ä–∞ –ø–æ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute(
                'SELECT sticker_id FROM sticker_associations WHERE association LIKE ? ORDER BY id DESC LIMIT 1',
                (f'%{association.lower().strip()}%',)
            )
            result = cursor.fetchone()
            conn.close()
            return result[0] if result else None
        except Exception as e:
            logger.error(f"Error getting sticker: {e}")
            return None

    def get_user_associations(self, user_id: int) -> List[tuple]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute(
                'SELECT sticker_id, association, created_at FROM sticker_associations WHERE user_id = ? ORDER BY created_at DESC',
                (user_id,)
            )
            result = cursor.fetchall()
            conn.close()
            return result
        except Exception as e:
            logger.error(f"Error getting user associations: {e}")
            return []

    def delete_association(self, user_id: int, sticker_id: str, association: str) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute(
                'DELETE FROM sticker_associations WHERE user_id = ? AND sticker_id = ? AND association = ?',
                (user_id, sticker_id, association)
            )
            conn.commit()
            success = cursor.rowcount > 0
            conn.close()
            return success
        except Exception as e:
            logger.error(f"Error deleting association: {e}")
            return False

    def log_usage(self, user_id: int, sticker_id: str, association: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–∞"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute(
                'INSERT INTO usage_stats (user_id, sticker_id, association) VALUES (?, ?, ?)',
                (user_id, sticker_id, association)
            )
            conn.commit()
            conn.close()
        except Exception as e:
            logger.error(f"Error logging usage: {e}")

    def get_stats(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()

            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–π
            cursor.execute('SELECT COUNT(*) FROM sticker_associations')
            total_associations = cursor.fetchone()[0]

            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Ç–∏–∫–µ—Ä–æ–≤
            cursor.execute('SELECT COUNT(DISTINCT sticker_id) FROM sticker_associations')
            unique_stickers = cursor.fetchone()[0]

            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            cursor.execute('SELECT COUNT(DISTINCT user_id) FROM sticker_associations')
            total_users = cursor.fetchone()[0]

            # –¢–æ–ø –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–π
            cursor.execute('''
                SELECT association, COUNT(*) as usage_count 
                FROM usage_stats 
                GROUP BY association 
                ORDER BY usage_count DESC 
                LIMIT 10
            ''')
            top_associations = cursor.fetchall()

            conn.close()

            return {
                'total_associations': total_associations,
                'unique_stickers': unique_stickers,
                'total_users': total_users,
                'top_associations': top_associations
            }
        except Exception as e:
            logger.error(f"Error getting stats: {e}")
            return {}


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = StickerDatabase()


def create_main_keyboard():
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä")],
            [KeyboardButton(text="üìã –ú–æ–∏ —Å—Ç–∏–∫–µ—Ä—ã"), KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
            [KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å")]
        ],
        resize_keyboard=True,
        persistent=True
    )
    return keyboard


def create_inline_keyboard_for_associations(associations: List[tuple], page: int = 0):
    """–°–æ–∑–¥–∞–Ω–∏–µ inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–π"""
    keyboard = []
    items_per_page = 8  # –£–º–µ–Ω—å—à–∏–ª –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    start_idx = page * items_per_page
    end_idx = start_idx + items_per_page

    page_associations = associations[start_idx:end_idx]

    for i, (sticker_id, association, created_at) in enumerate(page_associations):
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏ –∏ callback_data
        display_text = association[:20] + "..." if len(association) > 20 else association

        # –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è callback_data
        callback_data = f"del_{i + start_idx}_{page}"

        keyboard.append([
            InlineKeyboardButton(
                text=f"üóë {display_text}",
                callback_data=callback_data
            )
        ])

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"page_{page - 1}"))
    if end_idx < len(associations):
        nav_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"page_{page + 1}"))

    if nav_buttons:
        keyboard.append(nav_buttons)

    return InlineKeyboardMarkup(inline_keyboard=keyboard)


@dp.message(Command("start"))
async def start_command(message: types.Message):
    if message.chat.type != "private":
        return
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_text = """
ü§ñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ —Ñ–ª—É–±–∏–ª—å–Ω–∏ –±–µ–∑–æ–ø–∞—Å–Ω–∏–∫–æ–≤!</b>

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Å–æ–∑–¥–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é —Å—Ç–∏–∫–µ—Ä–æ–≤ —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏—è–º–∏.

<b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>
‚Ä¢ –î–æ–±–∞–≤–ª—è–π—Ç–µ —Å—Ç–∏–∫–µ—Ä—ã —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏—è–º–∏
‚Ä¢ –ü–∏—à–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ - –ø–æ–ª—É—á–∞–π—Ç–µ —Å—Ç–∏–∫–µ—Ä—ã
‚Ä¢ –£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–µ–π

–ù–∞—á–Ω–∏—Ç–µ —Å –∫–Ω–æ–ø–∫–∏ "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä"!
    """

    await message.answer(
        welcome_text,
        parse_mode="HTML",
        reply_markup=create_main_keyboard()
    )


@dp.message(Command("help"))
async def help_command(message: types.Message):

    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø–æ–º–æ—â–∏"""
    if message.chat.type != "private":
        return
    help_text = """
üìñ <b>–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è</b>

<b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä–∞:</b>
1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä"
2Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: "—Å–º–µ—Ö, —Ä–∞–¥–æ—Å—Ç—å, –≤–µ—Å–µ–ª—å–µ")
3Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Ç–∏–∫–µ—Ä

<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>
‚Ä¢ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –ª—é–±–æ–µ —Å–ª–æ–≤–æ –∏–∑ –≤–∞—à–∏—Ö –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–π
‚Ä¢ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å—Ç–∏–∫–µ—Ä
‚Ä¢ –†–∞–±–æ—Ç–∞–µ—Ç –ø–æ–∏—Å–∫ –ø–æ —á–∞—Å—Ç–∏ —Å–ª–æ–≤–∞!

<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b>
‚Ä¢ "üìã –ú–æ–∏ —Å—Ç–∏–∫–µ—Ä—ã" - –ø—Ä–æ—Å–º–æ—Ç—Ä –∏ —É–¥–∞–ª–µ–Ω–∏–µ
‚Ä¢ "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
‚Ä¢ –ú–æ–∂–Ω–æ —É–¥–∞–ª—è—Ç—å –Ω–µ–Ω—É–∂–Ω—ã–µ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏

<b>–ü—Ä–∏–º–µ—Ä—ã –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–π:</b>
‚Ä¢ "–ø—Ä–∏–≤–µ—Ç, hello, –∑–¥–∞—Ä–æ–≤–∞, –π–æ"
‚Ä¢ "–≥—Ä—É—Å—Ç—å, –ø–µ—á–∞–ª—å, —Å–ª–µ–∑—ã"
‚Ä¢ "–∫–æ—Ç, –∫–æ—Ç–∏–∫, –º—è—É"

<b>–°–æ–≤–µ—Ç—ã:</b>
üîπ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∏–Ω–æ–Ω–∏–º—ã –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∏—Å–∫–∞
üîπ –î–æ–±–∞–≤–ª—è–π—Ç–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è
üîπ –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –ø—Ä–æ —ç–º–æ—Ü–∏–∏ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    """

    await message.answer(help_text, parse_mode="HTML")


@dp.message(F.text == "‚ùì –ü–æ–º–æ—â—å")
async def help_button(message: types.Message):
    if message.chat.type != "private":
        return
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–º–æ—â–∏"""
    await help_command(message)


@dp.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä")
async def add_sticker_start(message: types.Message, state: FSMContext):
    if message.chat.type != "private":
        return
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–∞"""
    await state.set_state(StickerStates.waiting_for_associations)

    instruction = """
üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å—Ç–∏–∫–µ—Ä–∞</b>

–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.

<b>–ü—Ä–∏–º–µ—Ä—ã:</b>
‚Ä¢ <code>–ø—Ä–∏–≤–µ—Ç, hello, –∑–¥–∞—Ä–æ–≤–∞, –π–æ</code>
‚Ä¢ <code>—Å–º–µ—Ö, —Ä–∂–∞—á, –ª–æ–ª, –∞—Ö–∞—Ö–∞</code>
‚Ä¢ <code>–≥—Ä—É—Å—Ç—å, –ø–µ—á–∞–ª—å, —Å–ª–µ–∑—ã</code>

<i>–ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–π –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Ç–∏–∫–µ—Ä!</i>
    """

    await message.answer(instruction, parse_mode="HTML")


@dp.message(StateFilter(StickerStates.waiting_for_associations), F.text)
async def process_associations(message: types.Message, state: FSMContext):
    if message.chat.type != "private":

        return
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–π"""
    associations_text = message.text.strip()

    if not associations_text:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∞—Å—Å–æ—Ü–∏–∞—Ü–∏—é!")
        return

    # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–π
    associations = [assoc.strip().lower() for assoc in associations_text.split(',') if assoc.strip()]

    if not associations:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.")
        return
    for association in associations:
        if len(association) < 3:
            await message.answer("—Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è –∞—Å—Å–æ—Ü–∏–∞—Ü–∏—è")
            return
    if len(associations) > 20:
        await message.answer("‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–π! –ú–∞–∫—Å–∏–º—É–º 20.")
        return

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(associations=associations)
    await state.set_state(StickerStates.waiting_for_sticker)

    associations_preview = ', '.join(associations[:5])
    if len(associations) > 5:
        associations_preview += "..."

    await message.answer(
        f"‚úÖ –ê—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: <code>{associations_preview}</code>\n\n"
        f"üì§ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Ç–∏–∫–µ—Ä!",
        parse_mode="HTML"
    )


@dp.message(StateFilter(StickerStates.waiting_for_sticker), F.sticker)
async def process_sticker(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å—Ç–∏–∫–µ—Ä–∞"""
    if message.chat.type != "private":
        return
    data = await state.get_data()
    associations = data.get('associations', [])

    if not associations:
        await message.answer("‚ùå –û—à–∏–±–∫–∞! –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏.")
        await state.clear()
        return

    sticker_id = message.sticker.file_id
    user_id = message.from_user.id

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    success_count = 0
    for association in associations:
        if db.add_association(user_id, sticker_id, association):
            success_count += 1

    await state.clear()

    if success_count > 0:
        await message.answer(
            f"‚úÖ <b>–°—Ç–∏–∫–µ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
            f"üìù –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–π: {success_count}/{len(associations)}\n"
            f"üîç –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å –ª—é–±–æ–µ –∏–∑ —Å–ª–æ–≤: <code>{', '.join(associations[:3])}</code>\n\n"
            f"<i>–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ –º–æ–≥–ª–∏ –±—ã—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω—ã, –µ—Å–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç.</i>",
            parse_mode="HTML",
            reply_markup=create_main_keyboard()
        )
    else:
        await message.answer(
            "‚ö†Ô∏è –°—Ç–∏–∫–µ—Ä –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω - –≤—Å–µ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç!",
            reply_markup=create_main_keyboard()
        )


@dp.message(StateFilter(StickerStates.waiting_for_sticker))
async def wrong_content_for_sticker(message: types.Message, state: FSMContext):
    if message.chat.type != "private":
        return
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤–º–µ—Å—Ç–æ —Å—Ç–∏–∫–µ—Ä–∞"""
    if message.text:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º–µ–Ω–Ω–æ —Å—Ç–∏–∫–µ—Ä, –∞ –Ω–µ —Ç–µ–∫—Å—Ç!")
    else:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º–µ–Ω–Ω–æ —Å—Ç–∏–∫–µ—Ä!")


@dp.message(F.text == "üìã –ú–æ–∏ —Å—Ç–∏–∫–µ—Ä—ã")
async def show_user_stickers(message: types.Message):
    if message.chat.type != "private":
        return
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∏–∫–µ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    associations = db.get_user_associations(user_id)

    if not associations:
        await message.answer(
            "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å—Ç–∏–∫–µ—Ä–æ–≤!\n\n"
            "–ù–∞–∂–º–∏—Ç–µ \"‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä\" —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
            reply_markup=create_main_keyboard()
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ –≤ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_sessions[user_id] = associations

    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Å—Ç–∏–∫–µ—Ä–∞–º
    sticker_groups = {}
    for sticker_id, association, created_at in associations:
        if sticker_id not in sticker_groups:
            sticker_groups[sticker_id] = []
        sticker_groups[sticker_id].append(association)

    text = f"üìã <b>–í–∞—à–∏ —Å—Ç–∏–∫–µ—Ä—ã ({len(sticker_groups)} —à—Ç.)</b>\n\n"

    for i, (sticker_id, assocs) in enumerate(sticker_groups.items(), 1):
        assocs_text = ', '.join(assocs[:5])
        if len(assocs) > 5:
            assocs_text += f" –∏ –µ—â–µ {len(assocs) - 5}..."
        text += f"{i}. <code>{assocs_text}</code>\n"

    text += "\nüí° –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏—é –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –µ—ë:"

    keyboard = create_inline_keyboard_for_associations(associations)

    await message.answer(text, parse_mode="HTML", reply_markup=keyboard)


@dp.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_stats(message: types.Message):
    if message.chat.type != "private":
        return
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    stats = db.get_stats()
    user_associations = db.get_user_associations(message.from_user.id)

    if not stats:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏!")
        return

    text = f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>

üë§ <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –°—Ç–∏–∫–µ—Ä–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {len(set(assoc[0] for assoc in user_associations))}
‚Ä¢ –ê—Å—Å–æ—Ü–∏–∞—Ü–∏–π —Å–æ–∑–¥–∞–Ω–æ: {len(user_associations)}

üåê <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>/—ã
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('total_users', 0)}
‚Ä¢ –í—Å–µ–≥–æ —Å—Ç–∏–∫–µ—Ä–æ–≤: {stats.get('unique_stickers', 0)}
‚Ä¢ –í—Å–µ–≥–æ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–π: {stats.get('total_associations', 0)}
    """

    top_associations = stats.get('top_associations', [])
    if top_associations:
        text += "\nüî• <b>–¢–æ–ø –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–π:</b>\n"
        for i, (association, count) in enumerate(top_associations[:5], 1):
            text += f"{i}. {association} ({count} —Ä–∞–∑)\n"

    await message.answer(text, parse_mode="HTML")


@dp.callback_query(F.data.startswith("del_"))
async def delete_association_callback(callback: types.CallbackQuery):
    if callback.chat.type != "private":
        return
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏"""
    try:
        data_parts = callback.data.split("_")
        if len(data_parts) != 3:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö!")
            return

        association_index = int(data_parts[1])
        page = int(data_parts[2])
        user_id = callback.from_user.id

        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in user_sessions:
            user_sessions[user_id] = db.get_user_associations(user_id)

        associations = user_sessions[user_id]

        if association_index >= len(associations):
            await callback.answer("‚ùå –ê—Å—Å–æ—Ü–∏–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return

        sticker_id, association, created_at = associations[association_index]

        success = db.delete_association(user_id, sticker_id, association)

        if success:
            await callback.answer(f"‚úÖ –ê—Å—Å–æ—Ü–∏–∞—Ü–∏—è '{association}' —É–¥–∞–ª–µ–Ω–∞!")

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é
            user_sessions[user_id] = db.get_user_associations(user_id)
            updated_associations = user_sessions[user_id]

            if updated_associations:
                keyboard = create_inline_keyboard_for_associations(updated_associations, page)

                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –Ω–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
                sticker_groups = {}
                for sid, assoc, _ in updated_associations:
                    if sid not in sticker_groups:
                        sticker_groups[sid] = []
                    sticker_groups[sid].append(assoc)

                text = f"üìã <b>–í–∞—à–∏ —Å—Ç–∏–∫–µ—Ä—ã ({len(sticker_groups)} —à—Ç.)</b>\n\n"
                for i, (sid, assocs) in enumerate(sticker_groups.items(), 1):
                    assocs_text = ', '.join(assocs[:5])
                    if len(assocs) > 5:
                        assocs_text += f" –∏ –µ—â–µ {len(assocs) - 5}..."
                    text += f"{i}. <code>{assocs_text}</code>\n"
                text += "\nüí° –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏—é –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –µ—ë:"

                await callback.message.edit_text(text, parse_mode="HTML")
                await callback.message.edit_reply_markup(reply_markup=keyboard)
            else:
                await callback.message.edit_text(
                    "üì≠ –í—Å–µ —Å—Ç–∏–∫–µ—Ä—ã —É–¥–∞–ª–µ–Ω—ã!\n\n"
                    "–ù–∞–∂–º–∏—Ç–µ \"‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä\" —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ."
                )
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è!")

    except (ValueError, IndexError) as e:
        logger.error(f"Error in delete callback: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏!")
    except Exception as e:
        logger.error(f"Unexpected error in delete callback: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!")


@dp.callback_query(F.data.startswith("page_"))
async def pagination_callback(callback: types.CallbackQuery):
    if callback.chat.type != "private":
        return
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
    try:
        page = int(callback.data.split("_")[1])
        user_id = callback.from_user.id

        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏
        if user_id not in user_sessions:
            user_sessions[user_id] = db.get_user_associations(user_id)

        associations = user_sessions[user_id]
        keyboard = create_inline_keyboard_for_associations(associations, page)

        await callback.message.edit_reply_markup(reply_markup=keyboard)
        await callback.answer()

    except (ValueError, IndexError) as e:
        logger.error(f"Error in pagination: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏!")
    except Exception as e:
        logger.error(f"Unexpected error in pagination: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!")


# –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Ç–∏–∫–µ—Ä–æ–≤
@dp.message(F.text)
async def search_sticker(message: types.Message, state: FSMContext):
    logger.info(message.chat.id)
    """–ü–æ–∏—Å–∫ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∏–∫–µ—Ä–∞ –ø–æ —Ç–µ–∫—Å—Ç—É"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
    current_state = await state.get_state()
    if current_state is not None:
        return  # –ï—Å–ª–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ —Å—Ç–∏–∫–µ—Ä–æ–≤

    text = message.text.lower().strip()

    # –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –∏ –∫–Ω–æ–ø–æ–∫
    if text.startswith('/') or text in ["‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä", "üìã –ú–æ–∏ —Å—Ç–∏–∫–µ—Ä—ã", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "‚ùì –ü–æ–º–æ—â—å"]:
        return

    # –ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º—É —Ç–µ–∫—Å—Ç—É –∏ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–ª–æ–≤–∞–º
    sticker_id = None
    matched_association = None

    # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    sticker_id = db.get_sticker_by_association(text)
    if sticker_id:
        matched_association = text
    else:
        # –ü–æ–∏—Å–∫ –ø–æ —Å–ª–æ–≤–∞–º
        words = re.findall(r'\b\w+\b', text)
        for word in words:
            if len(word) >= 2:  # –ú–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
                sticker_id = db.get_sticker_by_association(word)
                if sticker_id:
                    matched_association = word
                    break

    if sticker_id:
        try:
            await message.answer_sticker(sticker_id)
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            db.log_usage(message.from_user.id, sticker_id, matched_association)
        except Exception as e:
            logger.error(f"Error sending sticker: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∏–∫–µ—Ä–∞. –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–∏–∫–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")


@dp.message(Command("stats"))
async def stats_command(message: types.Message):
    if message.chat.type != "private":
        return
    """–ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤"""
    if message.from_user.id not in ADMIN_USER_IDS:
        await show_stats(message)
        return

    stats = db.get_stats()
    text = f"""
üîß <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>

üìà <b>–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('total_users', 0)}
‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Ç–∏–∫–µ—Ä–æ–≤: {stats.get('unique_stickers', 0)}
‚Ä¢ –í—Å–µ–≥–æ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–π: {stats.get('total_associations', 0)}

üî• <b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏:</b>
    """

    for i, (association, count) in enumerate(stats.get('top_associations', [])[:10], 1):
        text += f"{i}. {association} - {count} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π\n"

    await message.answer(text, parse_mode="HTML")


@dp.message(Command("mystickers"))
async def mystickers_command(message: types.Message):

    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∏–∫–µ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if message.chat.type != "private":
        return
    await show_user_stickers(message)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
@dp.error()
async def error_handler(event, exception):
    if event.chat.type != "private":
        return
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"Error occurred: {exception}")

    # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        if hasattr(event, 'message') and event.message:
            await event.message.answer(
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                reply_markup=create_main_keyboard()
            )
    except:
        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

    return True


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
    if API_TOKEN == '123' or len(API_TOKEN) < 10:
        logger.error("‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞!")
        logger.error("üìù –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω —É @BotFather –≤ Telegram")
        logger.error("üîß –ó–∞–º–µ–Ω–∏—Ç–µ API_TOKEN = '123' –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω")
        return

    logger.info("üöÄ –ó–∞–ø—É—Å–∫ StickerBot...")

    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
        bot_info = await bot.get_me()
        logger.info(f"‚úÖ –ë–æ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: @{bot_info.username}")

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
        await bot.set_my_commands([
            types.BotCommand(command="start", description="üöÄ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
            types.BotCommand(command="help", description="‚ùì –ü–æ–º–æ—â—å –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"),
            types.BotCommand(command="mystickers", description="üìã –ú–æ–∏ —Å—Ç–∏–∫–µ—Ä—ã"),
            types.BotCommand(command="stats", description="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        ])

        logger.info("üéØ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        await dp.start_polling(bot, skip_updates=True)

    except Exception as e:
        if "Unauthorized" in str(e):
            logger.error("‚ùå –û–®–ò–ë–ö–ê –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò:")
            logger.error("üîë –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞!")
            logger.error("üìù –ü–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω —É @BotFather")
            logger.error("üîß –ó–∞–º–µ–Ω–∏—Ç–µ API_TOKEN –≤ –∫–æ–¥–µ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π")
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
    finally:
        await bot.session.close()


if __name__ == '__main__':
    # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–ª—É—á–µ–Ω–∏—é —Ç–æ–∫–µ–Ω–∞
    if API_TOKEN == '123':
        print("=" * 60)
        print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
        print("=" * 60)
        print("üìù –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –±–æ—Ç–∞:")
        print("1Ô∏è‚É£  –û—Ç–∫—Ä–æ–π—Ç–µ Telegram")
        print("2Ô∏è‚É£  –ù–∞–π–¥–∏—Ç–µ @BotFather")
        print("3Ô∏è‚É£  –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /newbot")
        print("4Ô∏è‚É£  –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º")
        print("5Ô∏è‚É£  –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω")
        print("6Ô∏è‚É£  –ó–∞–º–µ–Ω–∏—Ç–µ API_TOKEN = '123' –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω")
        print("=" * 60)
        print("–ü—Ä–∏–º–µ—Ä —Ç–æ–∫–µ–Ω–∞: 1234567890:ABCDEF1234567890abcdef1234567890ABC")
        print("=" * 60)

    asyncio.run(main())
